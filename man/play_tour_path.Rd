% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zDepricated_3_visualize.r
\name{play_tour_path}
\alias{play_tour_path}
\title{Animates the provided tour path.}
\usage{
play_tour_path(
  tour_path,
  data = NULL,
  angle = 0.05,
  render_type = render_plotly,
  ...
)
}
\arguments{
\item{tour_path}{The result of \code{tourr::save_history()} or \code{manual_tour()}.}

\item{data}{Optional, number of columns must match that of \code{tour_path}.}

\item{angle}{Target distance (in radians) between steps. Defaults to .05.}

\item{render_type}{Graphics to render to. Defaults to \code{render_plotly},
alternative use \code{render_gganimate}.}

\item{...}{Optionally pass additional arguments to \code{render_} and the
function used in \code{render_type}.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#superseded}{\figure{lifecycle-superseded.svg}{options: alt='[Superseded]'}}}{\strong{[Superseded]}}, see \code{\link{ggtour}}.
Takes the result of \code{tourr::save_history()} or \code{manual_tour()}, interpolates
over the path and renders into a specified \code{render_type}.
}
\examples{
library(spinifex)
message("It's suggested to switch to the proto api, see `?ggtour` to get started.")

dat_std <- scale_sd(wine[, 2:6])
clas    <- wine$Type
bas     <- basis_pca(dat_std)
gt_path <- save_history(dat_std, tour_path = tourr::grand_tour(), max = 5)

\donttest{
suppressWarnings(
  play_tour_path(tour_path = gt_path, data = dat_std)
)

suppressWarnings(
  play_tour_path(tour_path = gt_path, data = dat_std,
                 axes = "bottomleft", angle = .08, fps = 8,
                 aes_args = list(color = clas, shape = clas),
                 identity_args = list(size = 1.5, alpha = .7),
                 ggproto = 
                   list(ggplot2::theme_void(), ggplot2::ggtitle("My title")),
                 render_type = render_gganimate)
)

## Saving a .gif(may require additional setup)
if(FALSE){ ## Don't accidentally save file
  ## Export plotly .html widget
  play_tour_path(tour_path = gt_path, data = dat_std,
                 render_type = render_plotly,
                 html_filename = "myRadialTour.html")
               
  ## Export gganimate .gif
  play_tour_path(tour_path = gt_path, data = dat_std,
                 render_type = render_gganimate,
                 gif_path = "myOutput", gif_filename = "myRadialTour.gif")
}}
}
\seealso{
\code{\link{render_}} For arguments to pass into \code{...}.
}
